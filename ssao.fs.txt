uniform sampler2D position;
uniform vec2 screen;
uniform float g_Radius;
uniform int z_far;
uniform float zfar_cuttoff;
uniform float contrast;
int num_samples;


varying vec2 uv;


void main(void)
{
num_samples = 32;
vec2 points[64];
points[0] = vec2(-0.613392, 0.617481);
points[1] = vec2(0.170019, -0.040254);
points[2] = vec2(-0.299417, 0.791925);
points[3] = vec2(0.645680, 0.493210);
points[4] = vec2(-0.651784, 0.717887);
points[5] = vec2(0.421003, 0.027070);
points[6] = vec2(-0.817194, -0.271096);
points[7] = vec2(-0.705374, -0.668203);
points[8] = vec2(0.977050, -0.108615);
points[9] = vec2(0.063326, 0.142369);
points[10] = vec2(0.203528, 0.214331);
points[11] = vec2(-0.667531, 0.326090);
points[12] = vec2(-0.098422, -0.295755);
points[13] = vec2(-0.885922, 0.215369);
points[14] = vec2(0.566637, 0.605213);
points[15] = vec2(0.039766, -0.396100);
points[16] = vec2(0.751946, 0.453352);
points[17] = vec2(0.078707, -0.715323);
points[18] = vec2(-0.075838, -0.529344);
points[19] = vec2(0.724479, -0.580798);
points[20] = vec2(0.222999, -0.215125);
points[21] = vec2(-0.467574, -0.405438);
points[22] = vec2(-0.248268, -0.814753);
points[23] = vec2(0.354411, -0.887570);
points[24] = vec2(0.175817, 0.382366);
points[25] = vec2(0.487472, -0.063082);
points[26] = vec2(-0.084078, 0.898312);
points[27] = vec2(0.488876, -0.783441);
points[28] = vec2(0.470016, 0.217933);
points[29] = vec2(-0.696890, -0.549791);
points[30] = vec2(-0.149693, 0.605762);
points[31] = vec2(0.034211, 0.979980);
points[32] = vec2(0.503098, -0.308878);
points[33] = vec2(-0.016205, -0.872921);
points[34] = vec2(0.385784, -0.393902);
points[35] = vec2(-0.146886, -0.859249);
points[36] = vec2(0.643361, 0.164098);
points[37] = vec2(0.634388, -0.049471);
points[38] = vec2(-0.688894, 0.007843);
points[39] = vec2(0.464034, -0.188818);
points[40] = vec2(-0.440840, 0.137486);
points[41] = vec2(0.364483, 0.511704);
points[42] = vec2(0.034028, 0.325968);
points[43] = vec2(0.099094, -0.308023);
points[44] = vec2(0.693960, -0.366253);
points[45] = vec2(0.678884, -0.204688);
points[46] = vec2(0.001801, 0.780328);
points[47] = vec2(0.145177, -0.898984);
points[48] = vec2(0.062655, -0.611866);
points[49] = vec2(0.315226, -0.604297);
points[50] = vec2(-0.780145, 0.486251);
points[51] = vec2(-0.371868, 0.882138);
points[52] = vec2(0.200476, 0.494430);
points[53] = vec2(-0.494552, -0.711051);
points[54] = vec2(0.612476, 0.705252);
points[55] = vec2(-0.578845, -0.768792);
points[56] = vec2(-0.772454, -0.090976);
points[57] = vec2(0.504440, 0.372295);
points[58] = vec2(0.155736, 0.065157);
points[59] = vec2(0.391522, 0.849605);
points[60] = vec2(-0.620106, -0.328104);
points[61] = vec2(0.789239, -0.419965);
points[62] = vec2(-0.545396, 0.538133);
points[63] = vec2(-0.178564, -0.596057);
//int num_samples = 64;


   vec2 pixel = vec2(1/screen.x, 1/screen.y);

   vec2 S_normal = texture2D(position,uv).xy;
   float S_depth = texture2D(position,uv).w;
   float z_coff = (1/S_depth) * zfar_cuttoff;
   int i = 0;
   float occlusion;
   float PI = 3.14159265;
  
   for (i = 0; i <num_samples; i++ )
   {
   
   vec2 radius;
   vec2 sample;
   vec2 radius1;
   vec2 sample1;
   
   if (S_normal.x<0.5)
   {
      if (points[i].x<0)
      {
      
      sample.x = points[i].x;
      
      }else{
      
      sample.x = -points[i].x;
      
      }
   
   
   }
   
   
   if (S_normal.x>0.5)
   {
      if (points[i].x>0)
      {
      
      sample.x = points[i].x;
      
      }else{
      
      sample.x = -points[i].x;
      
      }
   
   
   }
   
   
  
   if (S_normal.y<0.5)
   {
      if (points[i].y<0)
      {
      
      sample.y = points[i].y;
      
      }else{
      
      sample.y = -points[i].y;
      
      }
   
   
   }
   
   
   if (S_normal.y>0.5)
   {
      if (points[i].y>0)
      {
      
      sample.y = points[i].y;
      
      }else{
      
      sample.y = -points[i].y;
      
      } 
   
   }

   
   
   
   radius.x = uv.x+sample.x * pixel.x * g_Radius;
   radius.y = uv.y+sample.y * pixel.y * g_Radius;
      
   vec2 uv_offset = vec2(radius.x,radius.y);
   float O_depth =  texture2D(position,uv_offset).w;
   vec2 O_normal = texture2D(position,uv_offset).xy;
   float clear = texture2D(position,uv_offset).z;
   
   float cosine = dot(O_normal,S_normal);
   float dist =distance(S_depth,O_depth);
   //(S_depth-O_depth)
   if ((S_depth>O_depth)&&(dist<z_coff)&&(S_normal!=O_normal))
   {
      //if ((cosine!=-1)&&(cosine!=1)&&(cosine<(PI/3))){
      occlusion += 1 * (1-((S_depth-O_depth)*(S_depth-O_depth)));
      //}
   }
   
   if (clear == 1)
   {   
   discard;
   }
   
   }
   occlusion = (1/3.14) * (occlusion / num_samples);//*(1/S_depth*S_depth);
   
   
   
  
   
  

   gl_FragColor = vec4((1-occlusion*contrast ));
}